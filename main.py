import json
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import os
import math
from statistics import mean, median, mode, stdev
from parce_sberclass import get_marks


YOUR_LOGIN = "–≤–∞—à_–ª–æ–≥–∏–Ω"
YOUR_PASSWORD = "–≤–∞—à_–ø–∞—Ä–æ–ª—å"



def classic_round(n):
    return int(math.floor(n + 0.5))

def add_overall_average(stats, all_marks):
    avg = round(sum(all_marks) / len(all_marks), 2) if all_marks else 0
    stats.append(f"# **–ò–¢–û–ì–û–í–´–ô –°–†–ï–î–ù–ò–ô –ë–ê–õ–õ: {avg:.2f}**\n")


os.makedirs("report_dir/plots", exist_ok=True)

subjects = get_marks(YOUR_LOGIN, YOUR_PASSWORD)
with open("report_dir/grades.json", "w+", encoding="utf-8") as f:
    for i in range(len(subjects)):
        subjects[i] = subjects[i].model_dump()
    json.dump(subjects, f, indent=4, ensure_ascii=False)

# # –ó–∞–≥—Ä—É–∑–∫–∞ JSON (–ß—Ç–æ–±—ã –Ω–µ –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑)
# with open("report_dir/grades.json", "r", encoding="utf-8") as f:
#     subjects = json.load(f)



stats = []
global_marks = []

stats.append("# üìä –û—Ç—á–µ—Ç –ø–æ –æ—Ü–µ–Ω–∫–∞–º\n")

def weighted_avg(marks):
    return round(sum(m * k for m, k in marks) / sum(k for _, k in marks), 2) if marks else 0

def calc_school_mark(avg):
    if avg is None or avg == "-" or avg == 0:
        return "-"
    base = int(avg)
    fraction = avg - base
    return base + 1 if fraction >= 0.6 else base

# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –æ–±—â–µ–π –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
for subj in subjects:
    for module in subj["modules"]:
        for entry in module["marks"]:
            mark = entry["mark"]
            koef = entry["koef"]
            global_marks.extend([mark] * koef)

# –°—Ç—Ä–æ–∏–º –æ–±—â—É—é –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
plt.figure(figsize=(6, 4))
plt.hist(global_marks, bins=np.arange(1.5, 6.6, 1), edgecolor='black', color="salmon", rwidth=0.8)
plt.title("–û–±—â–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Ü–µ–Ω–æ–∫")
plt.xlabel("–û—Ü–µ–Ω–∫–∞")
plt.ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
plt.xticks([2, 3, 4, 5])
plt.tight_layout()
global_img = "report_dir/plots/summary_hist.png"
plt.savefig(global_img)
plt.close()

from collections import Counter

def summarize(marks):
    return {
        "–°—Ä–µ–¥–Ω—è—è": round(mean(marks), 2),
        "–ú–µ–¥–∏–∞–Ω–∞": round(np.median(marks), 2),
        "–ú–æ–¥–∞": Counter(marks).most_common(1)[0][0] if marks else None,
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": len(marks),
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ": dict(Counter(marks))
    }


global_summary = summarize(global_marks)
stats.append(f"![–û–±—â–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞](/{global_img})\n")
stats.append("## –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n")
stats.append(f"- –°—Ä–µ–¥–Ω—è—è: **{global_summary['–°—Ä–µ–¥–Ω—è—è']}**\n")
stats.append(f"- –ú–µ–¥–∏–∞–Ω–∞: **{global_summary['–ú–µ–¥–∏–∞–Ω–∞']}**\n")
stats.append(f"- –ú–æ–¥–∞: **{global_summary['–ú–æ–¥–∞']}**\n")
stats.append(f"- –ö–æ–ª-–≤–æ –æ—Ü–µ–Ω–æ–∫: **{global_summary['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}**\n")
stats.append("- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n")
for k in sorted([2, 3, 4, 5]):
    stats.append(f"  - –û—Ü–µ–Ω–∫–∞ ***{k}***: {global_summary['–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'].get(k, 0)} —à—Ç.\n")

add_overall_average(stats, global_marks)
# –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
final_rows = []

global_marks = []
rows = []
for subj in subjects:
    name = subj["name"]
    module_avgs = {}
    flat_all_marks = []

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ –º–æ–¥—É–ª—è–º
    for module in subj["modules"]:
        marks = []
        for entry in module["marks"]:
            mark = entry["mark"]
            koef = entry["koef"]
            marks.extend([mark] * koef)
            flat_all_marks.append((mark, koef))
        if marks:
            avg = round(sum(marks) / len(marks), 2)
            module_avgs[module["name"]] = avg
        else:
            module_avgs[module["name"]] = None

    # –ë–µ—Ä—ë–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ –º–æ–¥—É–ª—é 1 –∏ 2 (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, "-")
    mod1_avg = module_avgs.get("1", None)
    mod2_avg = module_avgs.get("2", None)

    mod1_mark = calc_school_mark(mod1_avg) if mod1_avg is not None else "-"
    mod2_mark = calc_school_mark(mod2_avg) if mod2_avg is not None else "-"
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –≥–æ–¥ ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–≤—É—Ö –º–æ–¥—É–ª–µ–π

    if mod1_avg is not None and mod2_avg is not None:
        year_avg = round((mod1_avg + mod2_avg) / 2, 2)
        year_mark = classic_round((mod1_mark + mod2_mark) / 2)
    elif mod1_avg is not None:
        year_avg = mod1_avg
        year_mark = mod1_mark
    elif mod2_avg is not None:
        year_avg = mod2_avg
        year_mark = mod2_mark
    else:
        year_avg = "-"
        year_mark = "-"


    final_rows.append({
        "–ü—Ä–µ–¥–º–µ—Ç": name,
        "I –ú–æ–¥—É–ª—å": f"{mod1_avg:.2f}" if mod1_avg is not None else "-",
        "–û—Ü–µ–Ω–∫–∞ –∑–∞ I –º–æ–¥—É–ª—å": mod1_mark,
        "II –ú–æ–¥—É–ª—å": f"{mod2_avg:.2f}" if mod2_avg is not None else "-",
        "–û—Ü–µ–Ω–∫–∞ –∑–∞ II –º–æ–¥—É–ª—å": mod2_mark,
        "–ì–æ–¥": f"{year_avg:.2f}" if year_avg != "-" else "-",
        "–û—Ü–µ–Ω–∫–∞ –∑–∞ –≥–æ–¥": year_mark
    })

df_final = pd.DataFrame(final_rows)



stats.append("\n## üìã –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—Ü–µ–Ω–æ–∫\n")
stats.append(df_final.to_markdown(index=False))




def summarize(marks):
    return {
        "–°—Ä–µ–¥–Ω—è—è": round(mean(marks), 2),
        "–ú–µ–¥–∏–∞–Ω–∞": median(marks),
        "–ú–æ–¥–∞": mode(marks),
        "–°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": round(stdev(marks), 2) if len(marks) > 1 else 0,
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": len(marks),
        "–ü–æ –±–∞–ª–ª–∞–º": dict(Counter(marks))
    }

def format_summary(title, summary):
    s = ''
    s += f"- üìà –°—Ä–µ–¥–Ω—è—è: **{summary['–°—Ä–µ–¥–Ω—è—è']}**\n"
    s += f"- üìä –ú–µ–¥–∏–∞–Ω–∞: **{summary['–ú–µ–¥–∏–∞–Ω–∞']}**\n"
    s += f"- ü•á –ú–æ–¥–∞: **{summary['–ú–æ–¥–∞']}**\n"
    s += f"- üìâ –°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: **{summary['–°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ']}**\n"
    s += f"- üßÆ –ö–æ–ª-–≤–æ –æ—Ü–µ–Ω–æ–∫: **{summary['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}**\n"
    s += "- üßæ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n"
    for k in sorted([2, 3, 4, 5]):
        s += f"  - –û—Ü–µ–Ω–∫–∞ {k}: {summary['–ü–æ –±–∞–ª–ª–∞–º'].get(k, 0)} —à—Ç.\n"
    return s + "\n"

def weighted_avg(marks):
    return round(sum(m * k for m, k in marks) / sum(k for _, k in marks), 2)

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
for subj in subjects:
    name = subj["name"].replace(' ', '_')
    subject_marks = []
    flat_marks = []

    for module in subj["modules"]:
        module_name = module["name"]
        marks = []
        for entry in module["marks"]:
            mark = entry["mark"]
            koef = entry["koef"]
            marks.extend([mark] * koef)
            subject_marks.extend([mark] * koef)
            flat_marks.append((mark, koef))
            global_marks.extend([mark] * koef)

        rows.append({
            "–ü—Ä–µ–¥–º–µ—Ç": name,
            "–ú–æ–¥—É–ª—å": module_name,
            "–û—Ü–µ–Ω–∫–∏": ", ".join(map(str, marks)),
            "–°—Ä–µ–¥–Ω—è—è (–≤–∑–≤–µ—à.)": round(sum(marks) / len(marks), 2)
        })
    if not(subject_marks): continue

    # –ì—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(6, 4))
    plt.hist(subject_marks, bins=np.arange(1.5, 6.6, 1), edgecolor='black', color="skyblue", rwidth=0.8)
    plt.title(f"{name} ‚Äî –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Ü–µ–Ω–æ–∫")
    plt.xlabel("–û—Ü–µ–Ω–∫–∞")
    plt.ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
    plt.xticks([2, 3, 4, 5])
    plt.tight_layout()
    img_path = f"report_dir/plots/{name}_hist.png"
    plt.savefig(img_path)
    plt.close()

    # –û—Ç—á—ë—Ç
    stats.append(f"## {name}\n")
    summary = summarize(subject_marks)
    stats.append(format_summary(name, summary))
    stats.append(f"![{name}](/{img_path})\n")

    # –°—Ç—Ä–æ–∫–∞ —Å –∏—Ç–æ–≥–æ–º –∑–∞ –≥–æ–¥
    avg_year = weighted_avg(flat_marks)
    rows.append({
        "–ü—Ä–µ–¥–º–µ—Ç": name,
        "–ú–æ–¥—É–ª—å": "üü¢ –ò—Ç–æ–≥",
        "–û—Ü–µ–Ω–∫–∏": "‚Äî",
        "–°—Ä–µ–¥–Ω—è—è (–≤–∑–≤–µ—à.)": avg_year
    })

with open("report_dir/report.md", "w", encoding="utf-8") as f:
    f.write("\n".join(stats))

print("‚úÖ –û—Ç—á–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: report.md + –≥—Ä–∞—Ñ–∏–∫–∏ –≤ plots/")
